name: Deploy to Amazon ECS

on:
  push:
    branches:
      - aws-deploy

env: # 사용할 env
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  AWS_S3_ACCESS_KEY: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
  AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
  NEXT_PUBLIC_KAKAO_REST_API: ${{ secrets.NEXT_PUBLIC_KAKAO_REST_API }}
  NEXTAUTH_SECRET:  ${{ secrets.NEXTAUTH_SECRET }}
  
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials # AWS 로그인
        uses: aws-actions/configure-aws-credentials@v4
        with: # AWS 로그인에 필요한 정보들. 얘네는 Github Secret에 설정해야 한다.
          aws-access-key-id: ${{ secrets.AWS_DEPLOY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR # ECR에도 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR # 이미지 빌드하고 ECR push
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          
        # 아래처럼 docker 커맨드를 실행한다.
        run: |
          echo "JWT_SECRET=$JWT_SECRET" >> .env
          echo "AWS_S3_ACCESS_KEY=$AWS_S3_ACCESS_KEY" >> .env
          echo "AWS_S3_SECRET_ACCESS_KEY=$AWS_S3_SECRET_ACCESS_KEY" >> .env
          echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" >> .env
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
        # 아래-github action 자동배포 명령어 추가
      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_SSH }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: SSH Commands
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_TAG: ${{ github.sha }}
        with:
          host: ${{ secrets.AWS_DEPLOY_SSH_HOST }}
          username: ${{ secrets.AWS_DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.AWS_DEPLOY_SSH_KEY }}
          script_stop: true
          envs: IMAGE_TAG
          script: |
            ./docker-run.sh -p "${{ secrets.AWS_EC2_CONTAINER_PORT }}" -t $IMAGE_TAG

      - name: Remove Github Actions IP From Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_SSH }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
